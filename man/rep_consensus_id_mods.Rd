% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/id_mods.R
\name{rep_consensus_id_mods}
\alias{rep_consensus_id_mods}
\title{Individual level Moderators of Hearsay Consensus Model}
\usage{
rep_consensus_id_mods(data, model = NULL, p1_reports, p2_reports,
  id_mod_variable, interaction_term, n_triads = length(p1_reports),
  n_p1s_per_p2s = 1, n_p2s_per_p1s = 1)
}
\arguments{
\item{data}{The dataframe that contains the ratings, moderator variable, and the interaction term.
Data should be wide, with a row for every group of participants.
At a minimum, it must contain four columns: one for P1 reports, one for mean-centered P2 reports,
one for the mean-centered moderator variable, and one for the interaction term.}

\item{model}{Optional. A model from the corresponding ReputationAnalyses model builder function. If this
is supplied, no additional arguments need to be specified.}

\item{p1_reports}{Quoted column names that contain P1 reports,
or ratings made by the person that knows the target directly.
If more than one is supplied, the target-wise order must match the other
rating types.}

\item{p2_reports}{Quoted column names that contain P2 reports,
or ratings made by the person that knows the target indirectly through the corresponding P1.
Ratings should be grand-mean-centered to increase the interpretibility of the model parameters.
If more than one is supplied, the target-wise order must match the other rating types.}

\item{id_mod_variable}{Quoted column names that contain the individual-level moderator of interest.
If more than one is supplied from multiple exchangeable triads,
the order must match the order of the ratings. Like P2-reports, the variable should be mean-centered
to facilitate interpretability.}

\item{interaction_term}{Quoted column names that contain the interaction term, or the product of the
mean-centered P2-report and the mean-centered moderator variable. If more than one is supplied from multiple
exchangeable triads, the target-wise order must match the order of the ratings.}

\item{n_triads}{The number of exchangeable triads in each group. By default, this is determined by
counting the number of P1 reports. This parameter rarely needs to be changed.}

\item{n_p1s_per_p2s}{The number of P1s for every P2. This defaults to 1.
Currently, only values of 1 are supported.}

\item{n_p2s_per_p1s}{The number of P2s for every P1;. This defaults to 1.
Currently, only values of 1 are supported.}
}
\value{
The function returns an object of class \code{\link[lavaan:lavaan-class]{lavaan}}.
}
\description{
This function fits a model for individual-level moderator on hearsay consensus, and builds
a model for lavaan estimating the corresponding parameters.
It requires a dataframe and either a model from the relevant model builder
function or names of columns for p1_reports, p2_reports, and id_mod_variable.
The estimated parameters are:
}
\details{
\describe{
\item{hc_me}{hearsay consensus main effect; this should correspond to hearsay consensus at average
level of moderator variable (if data were properly mean-centered).}
\item{mod_me}{The meain effect of the moderator variable; it can be interpreted as the difference in
P1-reports related to differences in the individual-level moderator variable.}
\item{interaction}{This is the interaction term. It indicates the extent to which hearsay consensus,
depends on the moderator variable}
\item{v_p1}{variance for P1(T)}
\item{v_p2}{variance for P2(T)}
\item{v_mod}{variance for moderator variable}
\item{v_interaction}{variance for interaction term}
\item{int_p1}{intercept for P1(T)}
\item{int_p2}{intercept for P2(T)}
\item{int_mod}{intercept for moderator variable}
\item{int_interaction}{intercept for interaction term}
}
The function can handle up to n exchangeable triads.
}
\examples{
data("rep_sim_data")
          # Prepare data
         moderator_data <- rep_sim_data \%>\%
           dplyr::mutate(B_C_agreeableness_cent = scale(B_C_agreeableness, scale = FALSE),
                  D_A_agreeableness_cent = scale(D_A_agreeableness, scale = FALSE),
                  B_iri_perspective_cent = scale(B_iri_perspective, scale = FALSE),
                  D_iri_perspective_cent = scale(D_iri_perspective, scale = FALSE),
                  B_ptXagree_interaction = B_C_agreeableness_cent*B_iri_perspective_cent,
                  D_ptXagree_interaction = D_A_agreeableness_cent*D_iri_perspective_cent)

# Fitting by supplying variable/column names
agree_pt_mod <- rep_consensus_id_mods(data = moderator_data,
                                    p1_reports = c("A_C_agreeableness", "C_A_agreeableness"),
                                    p2_reports = c("B_C_agreeableness_cent", "D_A_agreeableness_cent"),
                                    id_mod_variable = c("B_iri_perspective_cent", "D_iri_perspective_cent"),
                                    interaction_term = c("B_ptXagree_interaction", "D_ptXagree_interaction"))

# alternatively, build the model frst
agree_pt_mod_model <- rep_consensus_id_mods_builder (p1_reports = c("A_C_agreeableness", "C_A_agreeableness"),
                                                    p2_reports = c("B_C_agreeableness_cent", "D_A_agreeableness_cent"),
                                                   id_mod_variable = c("B_iri_perspective_cent", "D_iri_perspective_cent"),
                                                   interaction_term = c("B_ptXagree_interaction", "D_ptXagree_interaction"))
# Then fit the model you just built
agree_pt_mod <- rep_consensus_id_mods(data = moderator_data,
                                    model = agree_pt_mod_model)

}
