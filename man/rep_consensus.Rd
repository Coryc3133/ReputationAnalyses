% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/reputation_model.R
\name{rep_consensus}
\alias{rep_consensus}
\title{Reputation Consensus Model}
\usage{
rep_consensus(data, model = NULL, p1_reports, p2_reports,
  n_triads = length(p1_reports), n_p1s_per_p2s = 1,
  n_p2s_per_p1s = 1)
}
\arguments{
\item{data}{The dataframe that contains P1 and P2 ratings.
Data should be wide, with a row for every group of participants.
At a minimum, it must contain two columns: one for P1 reports and one for P2 reports.}

\item{model}{Optional. A model from the corresponding ReputationModelR model builder function. If this
is supplied, no additional arguments need to be specified.}

\item{p1_reports}{Quoted column names that contain P1 reports,
or ratings made by the person that knows the target directly.
If more than one is supplied, the target-wise order must match the other
rating types.}

\item{p2_reports}{Quoted column names that contain P2 reports,
or ratings made by the person that knows the target indirectly through the corresponding P1.
If more than one is supplied, the target-wise order must match the other
rating types.}

\item{n_triads}{The number of exchangeable triads in each group. By default, this is determined by
counting the number of P1 reports. This parameter rarely needs to be changed.}

\item{n_p1s_per_p2s}{The number of P1s for every P2. This defaults to 1.
Currently, only values of 1 are supported.}

\item{n_p2s_per_p1s}{The number of P2s for every P1;. This defaults to 1.
Currently, only values of 1 are supported.}
}
\value{
The function returns an object of class \code{\link[lavaan:lavaan-class]{lavaan}}.
}
\description{
This fits a model estimating the possible hearsay reputation parameters from
a combination of P1- and P2-reports (no self-reports or accuracy criterion). It requires a
dataframe and either a model from the relevant model builder function or names of columns
with P1- and P2- ratings.
The estimated parameters are:
\describe{
\item{hc}{hearsay consensus; the correlation between P1(T) & P2(T)}
\item{int_p1}{Intercept for P1(T)}
\item{int_p2}{Intercept for P2(T)}
\item{v_p1}{variance for P1(T)}
\item{v_p2}{variance for P2(T)}
\item{p1_p2_rel_el}{P1-P2 Relative Elevation (i.e., Mean P1(T) - Mean P2(T))}
}
\emph{If n exchangeable triads > 1:}
\describe{
\item{rec}{direct reciprocity; the correlation between opposit P1(T)s (e.g., A(C) <-> C(A))}
\item{h}{hearsay reciprocity; the correlation between exchangeable P2(T)s (e.g., B(C) <-> D(A))}
\item{m}{unnamed parameter; The correlation between P2(T) and the opposite P1(T) in a group. (e.g., B(C) <-> C(A))}
}
The function can handle up to n exchangeable triads.
}
\examples{
data("rep_sim_data")
          agree_consensus <- rep_consensus(data = rep_sim_data,
                                           p1_reports = c("A_C_agreeableness", "C_A_agreeableness"),
                                           p2_reports = c("B_C_agreeableness", "D_A_agreeableness"))
         # alternatively
         # build the model
          agree_consensus_model <- rep_consensus_builder(p1_reports = c("A_C_agreeableness", "C_A_agreeableness"),
                                                             p2_reports = c("B_C_agreeableness", "D_A_agreeableness"))
         # then fit it
         agree_consensus <- rep_consensus(data = rep_sim_data,
                                          agree_consensus_model)


}
